{
  "version": 3,
  "sources": ["../src/server/index.tsx", "../src/server/index.tsx"],
  "sourcesContent": ["import { app, BrowserWindow } from 'electron'\r\nimport * as path from 'path'\r\n\r\nconst buildDir = path.join(__dirname);\r\n\r\n//nb, use of this library subject to review\r\n//also currently with hacked-in TS types https://github.com/yan-foto/electron-reload/issues/65\r\n//which is probably a Bad Idea as it'll break build.\r\n// import electronReload from 'electron-reload'\r\n/// also it didn't immediately work, and is fairly simple so could maybe be either replicated, or we can use something else.\r\n//const electronReload = require('electron-reload');\r\n// electronReload(buildDir);\r\n\r\nfunction createGUIWindow() {\r\n    const window = new BrowserWindow({\r\n        autoHideMenuBar: true,\r\n    });\r\n    window.loadURL(`file://${__dirname}/gui.html`);\r\n}\r\n\r\nfunction createRendererWindow() {\r\n    const window = new BrowserWindow({\r\n        autoHideMenuBar: true,\r\n        fullscreen: true\r\n    });\r\n    //would be good to have a saved configuration \r\n    //and use that to create sets of windows each on correct screens.\r\n    //nb may go back to old organic-art method of making one big borderless window\r\n    //spanning entire extended desktop\r\n    window.loadURL(`file://${__dirname}/renderer.html`);\r\n}\r\n\r\napp.on(\"ready\", createGUIWindow);", "import { app, BrowserWindow } from 'electron'\r\nimport * as path from 'path'\r\n\r\nconst buildDir = path.join(__dirname);\r\n\r\n//nb, use of this library subject to review\r\n//also currently with hacked-in TS types https://github.com/yan-foto/electron-reload/issues/65\r\n//which is probably a Bad Idea as it'll break build.\r\n// import electronReload from 'electron-reload'\r\n/// also it didn't immediately work, and is fairly simple so could maybe be either replicated, or we can use something else.\r\n//const electronReload = require('electron-reload');\r\n// electronReload(buildDir);\r\n\r\nfunction createGUIWindow() {\r\n    const window = new BrowserWindow({\r\n        autoHideMenuBar: true,\r\n    });\r\n    window.loadURL(`file://${__dirname}/gui.html`);\r\n}\r\n\r\nfunction createRendererWindow() {\r\n    const window = new BrowserWindow({\r\n        autoHideMenuBar: true,\r\n        fullscreen: true\r\n    });\r\n    //would be good to have a saved configuration \r\n    //and use that to create sets of windows each on correct screens.\r\n    //nb may go back to old organic-art method of making one big borderless window\r\n    //spanning entire extended desktop\r\n    window.loadURL(`file://${__dirname}/renderer.html`);\r\n}\r\n\r\napp.on(\"ready\", createGUIWindow);"],
  "mappings": "+cAAA,EAAmC,yBACb,qBAEL,AAAK,OAAK,WAU3B,aACI,MAAe,GAAI,iBAAc,CAC7B,gBAAiB,KAErB,EAAO,QAAQ,UAAU,sBCe7B,MAAI,GAAG,QAAS",
  "names": []
}
